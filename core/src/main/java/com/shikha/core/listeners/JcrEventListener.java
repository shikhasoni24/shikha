package com.shikha.core.listeners;

import javax.jcr.Node;
import javax.jcr.RepositoryException;
import javax.jcr.Session;
import javax.jcr.Workspace;
import javax.jcr.observation.Event;
import javax.jcr.observation.EventIterator;
import javax.jcr.observation.EventListener;
import javax.jcr.observation.ObservationManager;

import org.apache.sling.api.resource.LoginException;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ResourceResolverFactory;
import org.osgi.service.component.ComponentContext;
import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.shikha.core.service.ModifyNodePermissionService;
import com.shikha.core.utility.ResourceResolverUtil;

@Component(service = EventListener.class, immediate = true)
public class JcrEventListener implements EventListener {

	Logger log = LoggerFactory.getLogger(JcrEventListener.class);
	public static final String ERROR_EXEC_WORKFLOW = "Error while executing the workflow: ";
	public static final String ERROR_REPOSITORY = "Error while accessing the repository ";

	/** The constant ERROR_LOGIN */
	public static final String ERROR_LOGIN = "Error while logging in to the repository ";

	@Reference
	ResourceResolverFactory resourceResolverFactory;

	/**
	 * The Resource Resolver object
	 */
	ResourceResolver resolver;
	Session session;
	@Reference
	ModifyNodePermissionService modifyNodePermissionService;

	@Activate
	protected void activate(ComponentContext ctx) {
		try {

			// Take session. The event listener uses this session to execute its
			// logic. NB: This
			// is only for demonstrative purposes.
			try {
				resolver = ResourceResolverUtil.newResolver(resourceResolverFactory);
			} catch (LoginException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			session = resolver.adaptTo(Session.class);

			if (session == null) {
				return;
			}

			// The workspace is used to get the ObservationManager
			Workspace workspace = session.getWorkspace();

			if (workspace == null) {
				return;
			}

			// The ObservationManager allows us to add and remove Event
			// Listeners
			ObservationManager observationManager = workspace.getObservationManager();

			// Building the parameters for adding the event listener

			// Whether the subfolders of the given path should also be watched
			boolean isDeep = true;

			// Only events whose associated node has one of the UUIDs in this
			// list will be
			// received. If this parameter is null then no UUID-related
			// restriction is
			// placed on events received.
			String[] uuid = null;

			// Only events whose associated node has one of the node types (or a
			// subtype of
			// one of the node types) in this list will be received. If this
			// parameter is
			// null then no node type-related restriction is placed on events
			// received.
			String[] nodeTypeName = null;

			// If noLocal is true, then events generated by the session through
			// which the
			// listener was registered are ignored. Otherwise, they are not
			// ignored.
			boolean noLocal = true;

			// Registering the event listener
			observationManager.addEventListener(this, Event.PROPERTY_ADDED | Event.PROPERTY_CHANGED, "/content/shikha",
					isDeep, uuid, nodeTypeName, noLocal);

		} catch (javax.jcr.LoginException lEx) {
			log.error(ERROR_LOGIN + lEx.getMessage(), lEx);
		} catch (RepositoryException rEx) {
			log.error(ERROR_REPOSITORY + rEx.getMessage(), rEx);
		}
	}

	@Override
	public void onEvent(EventIterator events) {
		while (events.hasNext()) {

			try {

				Event event = events.nextEvent();
				
				/*Resource res=resolver.getResource(event.getPath());
				Node n=res.adaptTo(Node.class);
				we cant use aboove 2 lines because we are hitting this event on the basis of property change/added, so we 
				are receiving path till that property , which is not required for us in this case so we have used below way*/
				Node node = session.getNodeByIdentifier(event.getIdentifier());
				modifyNodePermissionService.modifyNodePermission(node.getPath(),"shikhaUser");
			} catch (RepositoryException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

	}

}
